__author__ = 'Stefan'
import numpy as np
import LaunchLoad as LL

def fuselagesize(V,L):#volume, cilinder length
    r=np.roots([4/3*np.pi,0,2*np.pi*L,-V])
    R=np.real(r[2])#fuselage radius for given length and volume
    tL=L+2*R #total length
    return R, tL

def fuselagemass(t,L,R,rhofuselage):
    Mcilinder=2*np.pi*R*L*t*rhofuselage
    Msphere=4*np.pi*R**2*t*rhofuselage
    fuselagemass=Mcilinder+Msphere
    return fuselagemass



#specificstrength=250000 #Nm/kg
#p=500000  #pressure difference in Pa
#stresses multiplied by t
#Cilinder
#Loopstress=p*R/t
#Longitudinalstress=p*R/2
#sphere
#t=0.001 #initial thickness
#Spherestress=p*R/2 #loop or longitudinal
#VMcilinder=np.sqrt(1./2*(Longitudinalstress**2+Loopstress**2+(Longitudinalstress-Loopstress)**2))
#VMsphere=Spherestress #von mises stress of sphere is equal to spherestress

rho = 0
g = 9.6
R=0.6
L = 5.
t = 0.005
Lift1 = 0
Lift2 = 0
Loc1 = 0
Loc2 = 0

def fuselageloadcase(rho,g,R,L,t,Lift1,Lift2,Loc1,Loc2):#lift1=lift main wing-weight main wing, Loc1=location of main wing, Lift2=lift second  wing
    Fz = LL.FuselageLaunchStress()[1]    
    tL=2*R+L
    #z pointed towards the back
    #y positive down
    #discretization
    n=100
    dz=tL/float(n)
    Acilinder=t*2*np.pi*R #material area in cilinder
    #weight distribution+lift
    wd=[]   #weight in N/m, positive downwards
    for i in range(n):
        z=i*dz
        wdl=0.
        if i==n/2:#z<(n/2. - 1.)*dz<(z+dz):
            wdl=wdl + Fz/dz
#        if z<R:
#            wdl=t*2*np.pi*R**2*g*rho/n*tL/R###nose weight equally distributed
#        
#        elif z<(R+L):
#            wdl=Acilinder*g*rho
#        else:# z<(2*R+L):
#            wdl=t*2*np.pi*R**2*g*rho/n*tL/R###tail weight equally distributed
#        if z<Loc1<(z+dz):
#            wdl=wdl+L/dz
        
        wd.append(wdl)
    wd=np.asarray(wd)
    wd=wd#+g*150./n    #add weight of other systems
    Vx=[]
    Vy=[]
    My=[]
    Mx=[]
    V1=0.
    for i in range(n):
        z=i*dz
        V1=V1+dz*wd[i]
        V2=0.
        M1=0.
        M2=0.
        for i in range(n):
            M1=M1+z*dz*wd[i]
            M2=M2+0.

        Vx.append(V1)
        Vy.append(V2)
        My.append(M1)
        Mx.append(M2)
    return Vx,Vy, My, Mx, wd


print fuselageloadcase(rho,g,R,L,t,Lift1,Lift2,Loc1,Loc2)[4]

"""
def fuselagestress(r,sufuselage,Vyf,Vzf,Mzf,Myf,tf,SF,p,L):
    n=len(Vyf)-1
    tl=2*r+L
    dz=tl/n

    vMst=100000000000.
    sufuselage=sufuselage/SF
    xt=[]
    yt=[]
    vMs=[]
    z=[]
    while vMst>sufuselage:

        theta=0.
        vMs=[]
        z=[]
        n2=80
        u=np.linspace(0,2*np.pi,n2)

        xt=[]
        yt=[]
        for i in range(len(Vyf)):
            zl=[]
            if i*dz<r:
                R=np.sqrt(r**2-(r-dz*i-dz)**2)
            elif i*dz<(r+L):
                R=r
            elif i*dz>(r+L) and i*dz<(2*r+L):
                R=np.sqrt(r**2-(dz*i-r-L)**2)

            if R==0:
                R=0.0001

            Iyy=np.pi*R**3*tf
            Izz=np.pi*R**3*tf

            thetal=[]
            while theta<(2*np.pi):
                Qy=2*tf*R**2*np.cos(theta)    #first moment of area
                Qz=2*tf*R**2*np.sin(theta)
                ql=Vyf[i]*Qy/Iyy-Vzf[i]*Qz/Izz
                sigmal=R*(Myf[i]*np.cos(theta)/Iyy-Mzf[i]*np.sin(theta)/Izz)
                thetal.append(theta)
                theta=theta+2*np.pi/n2
                longitudinalstress=p*R/2./tf
                qloop=p*R
                qtot=abs(qloop)+abs(ql)
                tau=qtot/tf
                totsigma=abs(longitudinalstress) + abs(sigmal)
                vMsl=np.sqrt(totsigma**2+3*tau**2)
                vMs.append(vMsl)
                zl.append(i*dz)
            theta=0.
            xl=R * np.cos(u)
            yl = R * np.sin(u)
            z.append(zl)
            xt.append(xl)
            yt.append(yl)
        tf=tf+0.00002
        vMst=max(vMs)


    #print xt
    #lz=np.size(x)
    #xt=list(xt)[0]
    #print thetal
    #print xt

    #np.arange(0,dz*(lz+1),dz)
    #print dz

    return tf, xt, yt, z, vMs, dz
#print fuselagestress(4.,5000000.,[50000.,49000.],[10000.,9800.],[15000.,50000.],[15000.,60000.],0.003, 2., 800000.)
#fuselage=fuselagestress(1.,5000000.,[50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.],[50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,10000.,9800.,10000.,9800.,10000.,9800.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.],[50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,15000.,50000.,10000.,9800.,10000.,9800.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.],[50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,15000.,60000.,10000.,9800.,10000.,9800.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.,50000.,49000.,48000., 49000., 47000., 45000.],0.003, 2., 800000., 5.)
#x=np.array(fuselage[1])
#y=np.array(fuselage[2])
#z=np.array(fuselage[3])
#vMs=np.array(fuselage[4])
#dz=fuselage[5]

#map(X.extend,x)


#map(Y.extend,y)
#map(Z.extend,z)
#import matplotlib
#import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import Axes3D
#fig = plt.figure()
#ax = fig.add_subplot(111, projection='3d')

#ax.plot_surface(Z,X,Y,rstride=1, cstride=1)#color=vMs
#plt.legend()
#plt.show()
from mayavi import mlab
#from itertools import chain
#X=list(chain.from_iterable(x))
#Y=list(chain.from_iterable(y))
#Z=list(chain.from_iterable(z))
#print np.shape(Y)
#print np.shape(Z)
#print np.shape(vMs)
def plot_mayavi(structured_data):
        sigma = structured_data[3]
        fig = mlab.figure(bgcolor=(1,1,1),fgcolor=(0,0,0))
        obj = mlab.points3d(structured_data[0], structured_data[1], structured_data[2],sigma/1000000,mode='cube', scale_mode="none",scale_factor=0.2)#mode="cube"
        bar = mlab.colorbar(object=obj, title="Stress (in MPa)", orientation="vertical")
        mlab.view(50,50)
        mlab.roll(5)
        mlab.savefig('C:\Users\Stefan\Desktop\\plot_fuselage.jpg', size=[500,300])#C:\Users\Stefan\Desktop+
        mlab.show()
#print plot_mayavi([X,Y,Z,vMs])


#fig = mlab.figure(bgcolor=(1,1,1),fgcolor=(0,0,0))
#obj = mlab.points3d(X, Y, Z,vMs)
#bar = mlab.colorbar(object=obj, title="Stress (in Pa)", orientation="vertical")
#mlab.view(50,50)
#mlab.roll(5)
#mlab.savefig(os.path.dirname(os.path.realpath(__file__))+'\\sim_outputs\\plot_mayavi.jpg', size=[5000,3000])
#mlab.show()
"""
