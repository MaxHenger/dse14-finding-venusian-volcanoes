"""
Created on Thu May 26 08:41:42 2016

@author: Mathijs

Thermal performance lander
"""

import numpy as np
import Atmosphere
import matplotlib.pyplot as plt
from ThermalResistanceFunctions import ThermalResistanceSphere

'''
LanderThermalFunction

Inputs:
T_maxEq = Maximum temperature that equipment in the lander can reach before it is expected to fail and mission ends [Celsius]
T_eq = Initial equipment temperature [Celsius]
T_1 = Initial temperature at outside edge of insulation [Celsius]
T_2 = Initial temperature at inside edge of insulation [Celsius]
SF = Safety factor for the possible connnections running through the insulation and possible holes inside the two shells required for instruments and radiation transfer [-]
mass_Equip = Weight of components in core [kg]
HeatCapacity_Equip = Average heat capacity of components in core [J/kg*K]
R_outerOutshell = Radiua of outside of outer shell [m]
K_Outshell = thermal conductivity of outer shell [W/(K*m)]
R_outerInsul = Radius of outer edge of insulation (or inner edge of outer shell) [m]
R_innerInsul = Radius of inner edge of insulation (or outer edge of inner shell) [m]
R_innerInshell = Radius of inner edge of inner shell (so all within is considered components) [m]
K_Inshell = thermal conductivity of inner shell material [W/(K*m)]
MolarMass = molar mass of gas used inside the insulation [g/mol]
Q_dotEquip = Heat generated by the scientific equipment [W]
TimeDescendArray = Array (with preferably timestep of 0.1s) that contains the time, eg. [0.,0.1,0.2,....] [s]
AltitudeArray = Array containing the altitudes of the different points along the lander descend trajectory [m]
LatitudeArray = Array containing the latitudes of the lander at each point (probably constant) [degree]
SolarLongitudeArray = Array containing the solar longitude of the lander at each point (probably constant) [degree]

Outputs:
Plot of temperature over time combined with altitude

'''
    
def LanderThermalFunction(T_maxEq,T_eq,T_1,T_2,SF,mass_Equip,HeatCapacity_Equip,R_outerOutshell,K_Outshell,R_outerInsul,\
    R_innerInsul,R_innerInshell,K_Inshell,MolarMass,Q_dotEquip,TimesDescendArray,AltitudeArray,LatitudeArray,SolarLongitudeArray,dt):
    # Set up atmosphere for the temperature
    atm = Atmosphere.Atmosphere('preliminary')
    
    # Determine thermal resistances of different layers in the fuselage 
    TR_Outshell = ThermalResistanceSphere(R_outerOutshell,R_outerInsul,K_Outshell)    
    TR_Inshell = ThermalResistanceSphere(R_innerInsul,R_innerInshell,K_Inshell) 
    
    # Create Empty lists to store the temperatures and time
    Tlist = []
    T1list = []
    T2list = []
    
    for i in xrange(len(TimeDescendArray)):
        
        # Determine temperature at altitude, and position [K]
        Temp = atm.temperature(AltitudeArray[i],LatitudeArray[i],SolarLongitudeArray[i], includeUncertainty=True)
    
        # Temperature in Celsius on the outside
        T_outside = Temp[2]-273.15      # Celsius
    
        # Determine average temperature in insulation material 
        T_avgInsul = (T_1 + T_2)/2.  # Celsius    
        SpecHeat_Insul = 0.016*((MolarMass/40.)**-0.35) + 0.000016*T_avgInsul       # W/K*m

        TR_Insul = ThermalResistanceSphere(R_outerInsul,R_innerInsul,SpecHeat_Insul)      
        
        # Sum thermal resistances to get total resistance
        TR_Tot = TR_Outshell+TR_Insul+TR_Inshell        # Celsius
        
        # Determine temperature differential
        dTemp = T_outside-T_eq      # Celsius
        
        # Determine thermal flow per second
        Q_dot = (dTemp/TR_Tot)*SF + Q_dotEquip   # Joule/s
        # Determine thermal flow over period dt
        Q_change = Q_dot*dt     # Joule
        
        # Determine temperature of the equipment onboard 
        T_eq = T_eq + Q_change/(mass_Equip*HeatCapacity_Equip)      # Celsius
        
        # Determine temperature on inner edge and outer edge of insulation
        dT1 = Q_dot*TR_Outshell     # Celsius
        dT2 = Q_dot*TR_Inshell      # Celsius
        
        # Determine temperature on outer (T_1) and inner edge (T_2) of the insulation
        T_1 = T_1 + dT1     # Celsius
        T_2 = T_eq + dT2    # Celsius
        
        # Fill in temperatures to create plots
        Tlist.append(T_eq)
        T1list.append(T_1)
        T2list.append(T_2)
        
        # Check that equipment has not yet overheated before reaching the surface
        if T_eq > T_maxEq:
            print "Max temperature reached at t", TimeDescendArray[i]
            break
    
    
    # Reached surface t = time of touchdown
    t = TimeDescendArray[-1]
    
    # Make arrays into lists for easy appending
    TimeList = list(TimeDescendArray)
    AltList = list(AltitudeArray)
    
    # Determine temperature at surface
    Temp = atm.temperature(AltitudeArray[-1],LatitudeArray[-1],SolarLongitudeArray[-1], includeUncertainty=True)
        
    # For as long as the temperature of equipment is below maximum continue computations
    while T_eq < T_maxEq:
        
        # Increase time with respect to initial touchdown time
        t = t + dt      # s
    
        # Temperature in Celsius on the outside
        T_outside = Temp[2]-273.15
    
        # Determine average temperature of insulation
        T_avgInsul = (T_1 + T_2)/2.  # Celsius    
        # Determine insulation performance and Thermal resistance
        SpecHeat_Insul = 0.016*((MolarMass/40.)**-0.35) + 0.000016*T_avgInsul       # W/K*m
        TR_Insul = ThermalResistanceSphere(R_outerInsul,R_innerInsul,SpecHeat_Insul)      
        
        # Sum thermal resistances to get total resistance
        TR_Tot = TR_Outshell+TR_Insul+TR_Inshell        # Celsius
        
        # Determine temperature differential
        dTemp = T_outside-T_eq      # Celsius
        
        # Determine thermal flow per second
        Q_dot = dTemp/TR_Tot + Q_dotEquip   # Joule/s
        print Q_dot
        # Determine thermal flow over period dt
        Q_change = Q_dot*dt     # Joule
        
        # Determine temperature of the equipment onboard 
        T_eq = T_eq + Q_change/(mass_Equip*HeatCapacity_Equip)      # Celsius
        
        # Determine temperature on inner edge and outer edge of insulation
        dT1 = Q_dot*TR_Outshell     # Celsius
        dT2 = Q_dot*TR_Inshell      # Celsius
        
        # Determine temperature on outer (T_1) and inner edge (T_2) of the insulation
        T_1 = T_1 + dT1     # Celsius
        T_2 = T_eq + dT2    # Celsius
        
        # Fill in temperatures to create plots
        Tlist.append(T_eq)
        T1list.append(T_1)
        T2list.append(T_2)
        TimeList.append(t)
        AltList.append(0)
    
    # Create plots
    fig, ax1 = plt.subplots()
    
    ax2 = ax1.twinx()
    ax1.plot(TimeList, AltList,'g-')
    ax2.plot(TimeList, Tlist,'b-')
    ax2.plot(TimeList, T1list, 'r-')
    
    ax1.set_xlabel('Time (s)')
    ax1.set_ylabel('Altitude (m)')
    ax2.set_ylabel('Temperature (Celsius)')
        
    plt.grid()
    plt.show()
    
    print 
    print "Time of Mission End (s)"
    print TimeList[-1]
    print "Time spent on surface (s)"
    print TimeList[-1]-TimeDescendArray[-1]
    return TimeList[-1]
    
if __name__ == '__main__':
    
    T_eq = 70.      # Celsius
    T_1 = 70        # Celsius
    T_2 = 70        # Celsius
    T_maxEq = 110   # Celsius
    SF = 1.1
    mass_Equip = 20.            # kg
    HeatCapacity_Equip = 600.   # J/kg*K
       
    R_outerOutshell = 0.45+0.0006   # m
    K_Outshell = 5.8         # W/(K*m)
    
    R_outerInsul = 0.45             # m
    R_innerInsul = 0.25+0.000661    # m
    MolarMass = 40. # g/mol
    
    R_innerInshell = 0.25       # m
    K_Inshell = 0.381    # W/(m*K)
    
    Q_dotEquip = 20. # W
    
    
    dt = 0.1 # s    
    
    # Set up arrays for the system that could be replaced with actual descent data [MAKE SURE DATA HAS TIMESTEP OF 0.1 SEC!!!! FOR ACCURACY]
    TimeDescendArray = np.arange(0,3600+dt,dt)
    AltitudeArray = np.linspace(38000,0,len(TimeDescendArray))
    LatitudeArray = np.zeros(len(TimeDescendArray))
    SolarLongitudeArray = np.zeros(len(TimeDescendArray))
    
    LanderThermalFunction(T_maxEq,T_eq,T_1,T_2,SF,mass_Equip,HeatCapacity_Equip,R_outerOutshell,K_Outshell,R_outerInsul,\
    R_innerInsul,R_innerInshell,K_Inshell,MolarMass,Q_dotEquip,TimeDescendArray,AltitudeArray,LatitudeArray,SolarLongitudeArray,dt)
    
    